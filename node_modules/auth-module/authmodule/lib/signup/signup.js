/**
 * Created by zendynamix on 18-11-2016.
 */
var mongoose = require('mongoose'),
    Schema = mongoose.Schema,
     bCrypt = require('bcrypt-nodejs');
var User = require('../models/userModel');





function addUser(userDetails){
    try{
        return new Promise(function (resolve, reject) {
            var newUser = new User();

            newUser.username = userDetails.username;
            //newUser.password =createHash( userDetails.password);
            newUser.password = userDetails.password;
            newUser.email = userDetails.email;
            newUser.firstName = userDetails.firstName;
            newUser.lastName = userDetails.lastName;

            signUp.userExists(userDetails.username).then((isUserExists)=>{
                if(isUserExists){
                resolve("user already exists");
                }
                else{
                    signUp.addUserDetails(newUser).then((responsess)=>{
                    resolve("user added successfully");
                })
                }

            }).catch(error => {reject(error.stack)});

    })


}catch(err){
    console.log(err.stack)
}


}
var signUp = {
        addUserDetails:(seedData)=>{
        return new Promise((resolve,reject)=>{
            seedData.save((err,response)=>{
            console.info(`New Data For File added`)
          resolve("user added");
            })
            })
            },

    userExists:(fileName)=>{
            return new Promise((resolve,reject)=>{
                    User.count({'username':fileName},(err,count)=>{
                    if(err){reject(err.stack)}else{
                if(count>0){
                    resolve(true)
                }
                else{
                    resolve(false)
                }

                }
        })
        })
        },
        findUserByName:(userName)=>{
            return new Promise((resolve,reject)=>{
                    User.findOne({'username':userName},(err,userResponse)=>{
                    if(err){reject(err.stack)}else{
                resolve(userResponse)

            }
        })
        })
        },
        deleteUserByName:(userName)=>{
            return new Promise((resolve,reject)=>{
                    User.remove({'username':userName},(err,userResponse)=>{
                    if(err){reject(err.stack)}else{
                resolve("user delete successfully")

            }
        })
        })
        },
    findAllUsers:()=>{
        return new Promise((resolve,reject)=>{
                User.find({},(err,userDetails)=>{
                if(err){reject(err.stack)}else{
            resolve(userDetails)

        }
    })
    })
    },
userCount:()=>{
        return new Promise((resolve,reject)=>{
                User.count({},(err,Usercount)=>{
                if(err){reject(err.stack)}else{
            resolve(Usercount)

        }
    })
    })
    },
userDetailsByRange:(start,range)=>{
    return new Promise((resolve,reject)=>{
            User.find({},(err,userDetails)=>{
            if(err){reject(err.stack)}else{
        resolve(userDetails)

    }
}).skip(parseInt(start)).limit(parseInt(range))
})
}






                    }


var createHash = function(password){
    return bCrypt.hashSync(password, bCrypt.genSaltSync(10));
}

function deleteUserDetails(userName){
    try{
        return new Promise(function (resolve, reject) {
            signUp.deleteUserByName(userName).then((resUserDetails)=>{
                resolve(resUserDetails)



    }).catch(error => {reject(error.stack)});

})


}catch(err){
    console.log(err.stack)
}


}
function UpdateUserDetails(userName){
    try{
        return new Promise(function (resolve, reject) {
            signUp.findUserByName(userDetails.username).then((resUserDetails)=>{
                console.log("*****")
            console.log(resUserDetails)
            if(resUserDetails){
                resUserDetails.username = userDetails.username;
                //newUser.password =createHash( userDetails.password);
                resUserDetails.password = userDetails.password;
                resUserDetails.email = userDetails.email;
                resUserDetails.firstName = userDetails.firstName;
                resUserDetails.lastName = userDetails.lastName;
                signUp.addUserDetails(resUserDetails).then((responsess)=>{
                    resolve("user updated successfully");
            })

        }


    }).catch(error => {reject(error.stack)});

})


}catch(err){
    console.log(err.stack)
}
}

function findAllUserDetails(){
    try{
        return new Promise(function (resolve, reject) {
            signUp.findAllUsers().then((resUserDetails)=>{
                resolve(resUserDetails)

            }).catch(error => {reject(error.stack)});

        })


    }catch(err){
        console.log(err.stack)
    }


}

function findUserCountDetails(){

    try{
        return new Promise(function (resolve, reject) {
            signUp.userCount().then((userCount)=>{
                resolve(userCount)

            }).catch(error => {reject(error.stack)});

        })


    }catch(err){
        console.log(err.stack)
    }


}

function findUserDetailsByRange(start,range){
    try{
        return new Promise(function (resolve, reject) {
            signUp.userDetailsByRange(start,range).then((resUserDetails)=>{
                resolve(resUserDetails)

            }).catch(error => {reject(error.stack)});

        })


    }catch(err){
        console.log(err.stack)
    }


}

module.exports={
    addUser:addUser,
    UpdateUserDetails:UpdateUserDetails,
    deleteUserDetails:deleteUserDetails,
    findAllUserDetails:findAllUserDetails,
    findUserCountDetails:findUserCountDetails,
    findUserDetailsByRange:findUserDetailsByRange

}