/**
 * Created by zendynamix on 18-11-2016.
 */
var bCrypt = require('bcrypt-nodejs');
var userData = require('../models/userModel');
var jwt    = require('jsonwebtoken'); // used to create, sign, and verify tokens
var expressJwt = require('express-jwt'); //https://npmjs.org/package/express-jwt
var secret = 'this is the secrete password';
var fs = require('fs');






function authenticate(userDetails){

    try{
        return new Promise(function (resolve, reject) {
                tokenAuthenticate.userExists(userDetails.username).then((resUserDetails)=>{
                    if(resUserDetails.length>0){
                    var status=isValidPassword(userDetails, resUserDetails[0].password );
                    console.log(status)
                    if(!status){
                        resolve({"status":"Wrong password"});
                    }
                    else{

                        tokenAuthenticate.getPrivateKey().then((privateKey)=>{
                        jwt.sign({ tokenDetails: userDetails }, privateKey, { algorithm: 'RS256'},function(token,err) {

                            resolve({token:token})
                        })

                        }).catch(error => {reject(error.stack)});

                    }

                }else{
                    resolve({"status":"Wrong user name"});
                }




    }).catch(error => {reject(error.stack)});

})


}catch(err){
    console.log(err.stack)
}


}

function validateToken(token){

    try{
        return new Promise(function (resolve, reject) {

                tokenAuthenticate.getPublicKey().then((publicKey)=>{

                jwt.verify(token, publicKey, function( err,decoded) {

                    if(decoded&&decoded.tokenDetails){

                        resolve("valid token")
                    }
                    else{
                        resolve("Invalid token")
                    }

                });

            }).catch(error => {reject(error.stack)});
        })
    }catch(err){
        console.log(err.stack)
    }


}

var isValidPassword = function(user, pwd){

    if( user.password===pwd){
        return true
    }else{
        return false
    }
   /* bCrypt.compare(pwd, user.password, function(err, res) {
        console.log("***************resresres******")
        console.log(res)
        console.log(err)
    });*/

}



var tokenAuthenticate = {
        userExists:(userName)=>{
    return new Promise((resolve,reject)=>{
        userData.find({'username':userName},(err,result)=>{
            if(err){reject(err.stack)}else{

            if(result.length>0){
                resolve(result)
            }else{
                resolve([])
            }

    }
})
})
},
getPrivateKey:()=>{
    return new Promise((resolve,reject)=>{
            fs.readFile('authmodule/lib/strategies/rsa-private.pem', function(err, data) {
                if (err) {
                    resolve(err)
                }
                else{
                    resolve(data)

                }


            });
})
},
getPublicKey:()=>{
    return new Promise((resolve,reject)=>{
            fs.readFile('authmodule/lib/strategies/rsa-public-key.pem', function(err, data) {
                if (err) {
                    resolve(err)
                }
                else{
                    resolve(data)

                }


            });
})
}

}
module.exports={
    authenticate:authenticate,
    validateToken:validateToken
}