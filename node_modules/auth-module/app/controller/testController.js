/**
 * Created by zendynamix on 18-11-2016.
 */
var express = require('express');
var mongoose = require('mongoose');
router = express.Router();
var cors = require('cors');
var authmodule=require('../../authmodule')
var fs = require('fs');
var jwt = require('jsonwebtoken');
var config = require('../../config/config')


module.exports = function (app) {
    app.use(router);

};
//validate token sample
router.get('/api/testUser', function (req, res) {

    res.send("procted")

})



router.post('/signUp', function (req, res) {
    return new Promise(
        function (resolve, reject) {
            try{
                authmodule.signUp(req.body).then((resStatus)=> {
                    console.log(resStatus)
                resolve();
                res.send(resStatus);
            });
        }
    catch(e){
        reject(e.stack)
    }
})

})

router.post('/signIn', function (req, res) {
    return new Promise(
        function (resolve, reject) {
            try{
                authmodule.authenticate(req.body).then((resStatus)=> {
                if(resStatus&&resStatus.token){
                    res.send(resStatus);
                    resolve();

                }else{
                    res.send(resStatus);
                    resolve();
                }

            });
        }
    catch(e){
        reject(e.stack)
    }
})

})
//update is based on username
router.post('/update', function (req, res) {
    return new Promise(
        function (resolve, reject) {
            try{
                authmodule.updateUser(req.body).then((resStatus)=> {
                    console.log(resStatus)
                resolve();
                res.send(resStatus);
            });
        }
    catch(e){
        reject(e.stack)
    }
})

})


/*router.get('/token', function (req, res) {
    var tokenJwt ;
    var cert_priv = fs.readFileSync(config.root+'/authmodule/lib/certificate/rsa-private.pem');  // get private key
     jwt.sign({ foo: 'bar' }, cert_priv, { algorithm: 'RS256'},function(token,err){
         tokenJwt=token;

         var cert = fs.readFileSync(config.root+'/authmodule/lib/certificate/rsa-public-key.pem'); // get public key
         console.log("***token****")
         console.log( typeof  cert);

         jwt.verify(tokenJwt, cert, function( decoded,err) {
             /!*console.log("*****************")
              console.log(decoded) // bar*!/
             console.log(err)
         });
        });



})*/

router.get('/delete/:userName', function (req, res) {
    console.log("*)*$)#$*@$)")
    console.log(req.params.userName)
    return new Promise(
        function (resolve, reject) {
            try{
                authmodule.deleteUser(req.params.userName).then((resStatus)=> {
                    console.log(resStatus)
                resolve();
                res.send(resStatus);
            });
        }
    catch(e){
        reject(e.stack)
    }
})

})

router.get('/users', function (req, res) {

    return new Promise(
        function (resolve, reject) {
            try{
                authmodule.findAllUser().then((resStatus)=> {
                    console.log(resStatus)
                resolve();
                res.send(resStatus);
            });
        }
    catch(e){
        reject(e.stack)
    }
})

})

router.get('/users/count', function (req, res) {

    return new Promise(
        function (resolve, reject) {
            try{
                authmodule.findUserCount().then((resStatus)=> {
                    console.log(resStatus)
                resolve();
                res.send({count:resStatus});
            });
        }
    catch(e){
        reject(e.stack)
    }
})

})


router.get('/api/users/:start/:range', function (req, res) {

    return new Promise(
        function (resolve, reject) {
            try{
                authmodule.findUserByRange(req.params.start,req.params.range).then((resStatus)=> {
                    console.log(resStatus)
                resolve();
                res.send(resStatus);
            });
        }
    catch(e){
        reject(e.stack)
    }
})

})

